import cv2
import numpy as np

class CircleDetect:
    def __init__(self, image_path):
        self.image_path = image_path

    def load_image(self):
        return cv2.imread(self.image_path, cv2.IMREAD_COLOR)

    def resize_image(self, scale_percent=20):
        img = self.load_image()
        width = int(img.shape[1] * scale_percent / 100)
        height = int(img.shape[0] * scale_percent / 100)
        dim = (width, height)
        return cv2.resize(img, dim, interpolation=cv2.INTER_AREA)

    def preprocess_image(self, img):
        cimg = cv2.cvtColor(img, cv2.COLOR_RGB2BGR)
        ret, thresh = cv2.threshold(cimg, 15, 255, cv2.THRESH_BINARY_INV)
        return cv2.blur(thresh, (3, 3))

    def detect_circles(self, img):
        edge_detected_image = cv2.Canny(img, 100, 200)
        circles = cv2.HoughCircles(edge_detected_image, cv2.HOUGH_GRADIENT, 1, 20,
                                   param1=50, param2=30, minRadius=0, maxRadius=0)
        return circles

    def visualize_markers(self, img, circles):
        if circles is not None:
            circles = np.uint16(np.around(circles))
            for i in circles[0, :]:
                print(f"Center (i, j): ({i[0]}, {i[1]}), Radius: {i[2]}")
                cv2.circle(img, (i[0], i[1]), i[2], (0, 255, 0), 2)
                cv2.circle(img, (i[0], i[1]), 2, (0, 0, 255), 2)
        return img

    def process_image(self):
        resized_img = self.resize_image()
        preprocessed_img = self.preprocess_image(resized_img)
        detected_circles = self.detect_circles(preprocessed_img)
        result_img = self.visualize_markers(preprocessed_img, detected_circles)
        cv2.imshow('Result', result_img)
        cv2.waitKey(0)

if __name__ == "__main__":
    image_path = 'D:/KP/C003/49C1Y07BB3/0001A.TIFF'
    marker_detector = MarkerDetector(image_path)
    marker_detector.process_image()
