import numpy as np
import matplotlib.pyplot as plt
import cv2
from skimage.feature import match_template
from skimage.feature import peak_local_max
import time

class CrossDetect:
    def __init__(self, image_path):
        self.image_path = image_path

    def load_image(self):
        img = cv2.imread(self.image_path, cv2.IMREAD_COLOR)
        return img

    def preprocess_image(self, img):
        scale_percent = 20
        width = int(img.shape[1] * scale_percent / 100)
        height = int(img.shape[0] * scale_percent / 100)
        dim = (width, height)
        resized = cv2.resize(img, dim, interpolation=cv2.INTER_AREA)
        cimg = cv2.cvtColor(resized, cv2.COLOR_BGR2GRAY)
        ret, thresh = cv2.threshold(cimg, 235, 255, cv2.THRESH_BINARY)
        return thresh

    def detect_crossmark(self, image):
        crossmark = np.ones((41, 41), dtype=float) * 255
        crossmark[:, 18:25] = 0
        crossmark[18:26, :] = 0
        result = match_template(image, crossmark, pad_input=True)
        peaks = peak_local_max(result, min_distance=1, threshold_rel=0.9)
        return result, peaks

if __name__ == "__main__":
    image_path = 'file_path'
    crossmark_detector = CrossDetect(image_path)

    start = time.time()
    img = crossmark_detector.load_image()
    thresh = crossmark_detector.preprocess_image(img)
    result, peaks = crossmark_detector.detect_crossmark(thresh)
    end = time.time()

    plt.imshow(result, cmap=plt.get_cmap('binary_r'))
    plt.show()

    plt.plot(peaks[:, 1], peaks[:, 0], 'o', markeredgecolor='r', markerfacecolor='none', markersize=1)

    print(f"Center of cross marker: {peaks}")
    print(f"Processing time: {end - start:.2f} seconds")
    cv2.waitKey(0)
